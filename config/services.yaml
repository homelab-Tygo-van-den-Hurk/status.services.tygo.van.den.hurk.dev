# Octoprint
# Uptime Kuma 
# Home Assistant
# Mealie
# Servarr
# Jellyseerr

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ENTERTAINMENT ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

- Entertainment (Frontend): #| Services for serving Content

    - Jellyfin:
        href:           https://jellyfin.services.tygo.van.den.hurk.dev
        siteMonitor:    https://jellyfin.services.tygo.van.den.hurk.dev
        description:    Watch movies,or shows, play your favorite music, or throw yourself into your best book using Jellyfin.
        icon:           jellyfin.svg
        widget:
            type:       jellyfin
            url:        https://jellyfin.services.tygo.van.den.hurk.dev
            key:        {{HOMEPAGE_VAR_APIKEY_JELLYFIN}}
            enableBlocks: true
            enableNowPlaying: false

    - Jellyseerr:       # TODO : Set up service
        href:           https://jellyseerr.services.tygo.van.den.hurk.dev
        siteMonitor:    https://jellyseerr.services.tygo.van.den.hurk.dev
        description:    Request movies and shows to be added to Jellyfin and Plex.
        icon:           jellyseerr.svg
        widget:
            type:       jellyseerr
            url:        https://jellyseerr.services.tygo.van.den.hurk.dev
            key:        {{HOMEPAGE_VAR_APIKEY_JELLYSEERR}}

- Entertainment (Backend): #| Services for getting Content

    - Radarr (HD):
        href:           https://radarr.services.tygo.van.den.hurk.dev
        siteMonitor:    http://tygos-nasserver.tail9fcea.ts.net:7878
        description:    Gets movies to watch off the internet.
        icon:           radarr.svg
        widget:
            type:       radarr
            url:        http://tygos-nasserver.tail9fcea.ts.net:7878
            key:        {{HOMEPAGE_VAR_APIKEY_RADARR_HD}}
    
    - Radarr (4K):
        href:           https://radarr.services.tygo.van.den.hurk.dev
        siteMonitor:    http://tygos-nasserver.tail9fcea.ts.net:7879
        description:    Gets movies to watch off the internet.
        icon:           radarr.svg
        widget:
            type:       radarr
            url:        http://tygos-nasserver.tail9fcea.ts.net:7879
            key:        {{HOMEPAGE_VAR_APIKEY_RADARR_4K}}

    - Sonarr (HD):
        href:           https://sonarr.services.tygo.van.den.hurk.dev
        siteMonitor:    http://tygos-nasserver.tail9fcea.ts.net:8989
        description:    Gets shows to watch off the internet.
        icon:           sonarr.svg
        widget:
            type:       sonarr
            url:        http://tygos-nasserver.tail9fcea.ts.net:8989
            key:        {{HOMEPAGE_VAR_APIKEY_SONARR_HD}}

    - Sonarr (4K):
        href:           https://sonarr.services.tygo.van.den.hurk.dev
        siteMonitor:    http://tygos-nasserver.tail9fcea.ts.net:8990
        description:    Gets shows to watch off the internet.
        icon:           sonarr.svg
        widget:
            type:       sonarr
            url:        http://tygos-nasserver.tail9fcea.ts.net:8990
            key:        {{HOMEPAGE_VAR_APIKEY_SONARR_4K}}

    - Readarr (eBook):
        href:           https://readarr-ebooks.services.tygo.van.den.hurk.dev
        siteMonitor:    http://tygos-nasserver.tail9fcea.ts.net:8787
        description:    Gets books to read off the internet.
        icon:           readarr.svg
        widget:
            type:       readarr
            url:        http://tygos-nasserver.tail9fcea.ts.net:8787
            key:        {{HOMEPAGE_VAR_APIKEY_READARR_EBOOKS}}

    - Readarr (audiobooks):
        href:           https://readarr-audiobooks.services.tygo.van.den.hurk.dev
        siteMonitor:    http://tygos-nasserver.tail9fcea.ts.net:8788
        description:    Gets books to read off the internet.
        icon:           readarr.svg
        widget:
            type:       readarr
            url:        http://tygos-nasserver.tail9fcea.ts.net:8788
            key:        {{HOMEPAGE_VAR_APIKEY_READARR_AUDIOBOOKS}}

    - Lidarr:
        href:           https://lidarr.services.tygo.van.den.hurk.dev
        siteMonitor:    http://tygos-nasserver.tail9fcea.ts.net:8686
        description:    Gets music to listen to.
        icon:           lidarr.svg
        widget:
            type:       lidarr
            url:        http://tygos-nasserver.tail9fcea.ts.net:8686
            key:        {{HOMEPAGE_VAR_APIKEY_LIDARR}}
    
    - Bazarr:
        href:           https://bazarr.services.tygo.van.den.hurk.dev
        siteMonitor:    http://tygos-nasserver.tail9fcea.ts.net:6767
        description:    Gets subtitles for movies, or shows off the internet.
        icon:           bazarr.svg
        widget:
            type:       bazarr
            url:        http://tygos-nasserver.tail9fcea.ts.net:6767
            key:        {{HOMEPAGE_VAR_APIKEY_BAZARR}}
        
    - Prowlarr:
        href:           https://prowlarr.services.tygo.van.den.hurk.dev
        siteMonitor:    http://tygos-nasserver.tail9fcea.ts.net:9696
        description:    A unified web interface for the R-stack services.
        icon:           prowlarr.svg
        widget:
            type:       prowlarr
            url:        http://tygos-nasserver.tail9fcea.ts.net:9696
            key:        {{HOMEPAGE_VAR_APIKEY_PROWLARR}}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SERVICES ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

- AI-Services:
    
    - OpenWeb UI:       
        href:           https://ai-chat.services.tygo.van.den.hurk.dev/
        siteMonitor:    http://openweb-ui_ai-chat_services_tygo_van_den_hurk_dev:8080
        description:    An AI chat page, where you can use any model without rate limits.
        icon:           /icons/openweb-ui.svg

    - Ollama:       
        href:           https://ai-chat.services.tygo.van.den.hurk.dev/
        siteMonitor:    http://ollama_ai-chat_services_tygo_van_den_hurk_dev:11434
        description:    An AI engine that can run any AI model.
        icon:           /icons/ollama.svg
        widget:
          type:         customapi
          url:          http://ollama_ai-chat_services_tygo_van_den_hurk_dev:11434/api/tags
          refreshInterval: 10000
          method:       GET
          mappings:
            - field:    models
              label:    Models
              remap:
              - any:    true # will map all other values
                to:     count(totals)

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STORAGE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

- Photo Storage Services: #| Photo Storage Applications

    - Photoprism:       # TODO : Set up service
        href:           https://photoprism.services.tygo.van.den.hurk.dev
        siteMonitor:    https://photoprism.services.tygo.van.den.hurk.dev
        description:    My personal photo storage server.
        icon:           photoprism.svg
        widget:
            type:       photoprism
            url:        https://photoprism.services.tygo.van.den.hurk.dev
            username:   admin
            password:   {{HOMEPAGE_VAR_APIKEY_PHOTOPRISM}}

    - Immich:           # TODO : Set up service
        href:           https://immich.services.tygo.van.den.hurk.dev
        siteMonitor:    https://immich.services.tygo.van.den.hurk.dev
        description:    Store your photo's securely, as a backup.
        icon:           immich.svg
        widget:
            type:       immich
            url:        https://immich.services.tygo.van.den.hurk.dev
            key:        {{HOMEPAGE_VAR_APIKEY_IMMICH}}

- General Storage Services: #| General Storage applications
        
    - Duplicati:        # TODO : Set up service
        href:           https://duplicati.services.tygo.van.den.hurk.dev
        siteMonitor:    https://duplicati.services.tygo.van.den.hurk.dev
        description:    A backup solution for backing up files to a remote server
        icon:           duplicati.svg

    - UNRAID:
        href:           http://tygos-nasserver.tail9fcea.ts.net
        siteMonitor:    http://tygos-nasserver.tail9fcea.ts.net
        description:    My personal UNRAID server.
        icon:           unraid.svg

    - NextCloud:        # TODO : Set up service
        href:           https://nextcloud.services.tygo.van.den.hurk.dev
        siteMonitor:    https://nextcloud.services.tygo.van.den.hurk.dev
        description:    My personal cloud storage server.
        icon:           nextcloud.svg
        widget:
            type:       nextcloud
            url:        https://nextcloud.services.tygo.van.den.hurk.dev
            key:        {{HOMEPAGE_VAR_APIKEY_NEXTCLOUD}}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STORAGE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

- Other Services:

    - Paperless:
        href:           https://paperless.services.tygo.van.den.hurk.dev
        siteMonitor:    https://paperless.services.tygo.van.den.hurk.dev
        description:    Save important documents, or invoices automatically.
        icon:           paperless-ngx.svg
        widget:
            type:       paperlessngx
            url:        https://paperless.services.tygo.van.den.hurk.dev
            key:        {{HOMEPAGE_VAR_APIKEY_PAPERLESS}}
          
    - Mealie:           
        href:           https://mealie.services.tygo.van.den.hurk.dev
        siteMonitor:    https://mealie.services.tygo.van.den.hurk.dev
        description:    Make sure you always have an idea on what to cook! Share and receive recipes with each other! 
        icon:           mealie.svg
        widget:
            type:       mealie
            url:        https://mealie.services.tygo.van.den.hurk.dev
            key:        {{HOMEPAGE_VAR_APIKEY_MEALIE}}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ INFRASTRUCTURE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

- Infrastructure:

    - Reverse Proxy (cloud):
        href:           http://oracle-cloud-server.tail9fcea.ts.net:81
        siteMonitor:    http://cloud-reverse-proxy:81
        description:    The service that guides all the traffic.
        icon:           nginx-proxy-manager.svg
        widget:
            type:       npm
            url:        http://cloud-reverse-proxy:81
            username:   {{HOMEPAGE_VAR_USER_REVERSEPROXY}}
            password:   {{HOMEPAGE_VAR_PASS_REVERSEPROXY}}
            fields:     [ "enabled", "disabled" ]

    - Uptime Kuma (cloud):
        href:           https://uptime-kuma.services.tygo.van.den.hurk.dev
        siteMonitor:    https://uptime-kuma.services.tygo.van.den.hurk.dev
        # ping:           uptime-kuma.services.tygo.van.den.hurk.dev
        description:    A status monitor for services. Notifies me when a services goes down.
        icon:           uptime-kuma.svg
        widget:
            type:       uptimekuma
            url:        http://uptime-kuma:3001
            slug:       {{HOMEPAGE_VAR_SLUG_UPTIMEKUMA}}
            fields:     ["up", "down", "uptime", "incident"]
    
    - Pi-Hole:          
        href:           https://pihole.services.tygo.van.den.hurk.dev
        siteMonitor:    https://pihole.services.tygo.van.den.hurk.dev
        description:    My personal DNS server. Blocks ads and malicious websites.
        icon:           pi-hole.svg
        widget:
            type:       pihole
            url:        https://pihole.services.tygo.van.den.hurk.dev
            version:    5
            key:        {{HOMEPAGE_VAR_APIKEY_PIHOLE}}

    - Authentik:        
        href:           https://authentik.services.tygo.van.den.hurk.dev
        siteMonitor:    https://authentik.services.tygo.van.den.hurk.dev
        description:    Log into any of my services using this service!
        icon:           authentik.png
        widget:
            type:       authentik
            url:        https://authentik.services.tygo.van.den.hurk.dev
            key:        {{HOMEPAGE_VAR_APIKEY_AUTHENTIK}}

    - Portainer (NAS):       
        href:           https://portainer.services.tygo.van.den.hurk.dev
        siteMonitor:    https://portainer.services.tygo.van.den.hurk.dev
        icon:           portainer.svg
        description:    My portainer instance at home. This is where I control all my docker containers.
        widget: 
            type:       portainer
            url:        https://portainer.services.tygo.van.den.hurk.dev
            env:        2
            key:        {{HOMEPAGE_VAR_APIKEY_PORTAINER}}
            fields:     [ "running", "stopped" ]
    
    - Portainer (Cloud):        
        href:           https://portainer.services.tygo.van.den.hurk.dev
        siteMonitor:    https://portainer.services.tygo.van.den.hurk.dev
        icon:           portainer.svg
        description:    My portainer instance in the cloud. This is where I control all my docker containers.
        widget: 
            type:       portainer
            url:        https://portainer.services.tygo.van.den.hurk.dev
            env:        3
            key:        {{HOMEPAGE_VAR_APIKEY_PORTAINER}}
            fields:     [ "running", "stopped" ]

    # - Watch Tower:   # TODO : Set up service
    #     href:           https://watchtower.services.tygo.van.den.hurk.dev
    #     description:    A service that updates containers when a newer version becomes available.
    #     siteMonitor:    https://watchtower.services.tygo.van.den.hurk.dev
    #     icon:           watchtower.svg
    #     widget:
    #         type:       watchtower
    #         url:        https://watchtower.services.tygo.van.den.hurk.dev
    #         key:        {{HOMEPAGE_VAR_APIKEY_WATCHTOWER}}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ IOT ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

- Smart Home:

    - Home Bridge:      # TODO : Set up service
        href:           https://homebridge.services.tygo.van.den.hurk.dev
        description:    A simple application that emulates Apple Home Kit for devices that do no support it.
        siteMonitor:    https://homebridge.services.tygo.van.den.hurk.dev
        icon:           homebridge.svg
        widget:
          type:         homebridge
          url:          https://homebridge.services.tygo.van.den.hurk.dev
          username:     {{HOMEPAGE_VAR_USER_HOMEBRIDGE}}
          password:     {{HOMEPAGE_VAR_PASS_HOMEBRIDGE}}

    - Home Assistant:   # TODO : Set up service
        href:           https://homeassistant.services.tygo.van.den.hurk.dev
        description:    A smart home automation service.
        siteMonitor:    https://homeassistant.services.tygo.van.den.hurk.dev
        icon:           home-assistant.svg
        widget:
            type:       homeassistant
            url:        https://homeassistant.services.tygo.van.den.hurk.dev
            key:        {{HOMEPAGE_VAR_APIKEY_HOMEASSISTANT}}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ WEBSITES ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

- Websites:

    - tygo.van.den.hurk.dev:
        href:         https://tygo.van.den.hurk.dev
        siteMonitor:  https://tygo.van.den.hurk.dev
        description:  My personal website.
        icon:         https://tygo.van.den.hurk.dev/assets/images/me/head-shot.jpg

    - redirects.tygo.van.den.hurk.dev:
        href:         https://redirects.tygo.van.den.hurk.dev
        siteMonitor:  https://redirects.tygo.van.den.hurk.dev
        description:  My personal redirection website.
        icon:         https://redirects.tygo.van.den.hurk.dev/assets/images/icons/redirect/responsive.svg

    - assets.tygo.van.den.hurk.dev:
        href:         https://assets.tygo.van.den.hurk.dev
        siteMonitor:  https://assets.tygo.van.den.hurk.dev
        description:  My personal web assets storage website.
        icon:         https://assets.tygo.van.den.hurk.dev/favicon.ico

    - van.den.hurk.dev:
        href:         https://van.den.hurk.dev
        siteMonitor:  https://van.den.hurk.dev
        description:  A website that tells that van.den.hurk.dev domains are for sale.
        icon:         https://van.den.hurk.dev/icon.svg

    - blog.tygo.van.den.hurk.dev:
        href:         https://blog.tygo.van.den.hurk.dev
        siteMonitor:  https://blog.tygo.van.den.hurk.dev
        description:  My personal blog.
        icon:         /icons/blog.svg

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ PROJECTS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

- Projects:

    - Game Design 3:
        href:         https://gamedesign3.school.tygo.van.den.hurk.dev
        siteMonitor:  https://gamedesign3.school.tygo.van.den.hurk.dev
        description:  A school project I made when studying at TU/e.
        icon:         https://gamedesign3.school.tygo.van.den.hurk.dev/pirate-captain.jpeg

    - Kapoetio:
        href:         https://kapoetio.software.tygo.van.den.hurk.dev
        siteMonitor:  https://kapoetio.software.tygo.van.den.hurk.dev
        description:  A game where you can create your own chess boards and pieces.
        icon:         https://kapoetio.software.tygo.van.den.hurk.dev/assets/icons/applicationIcons/board-game.svg

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SERVERS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

- Servers:

    - Cloud Server:
        ping:           cloud.tygo.van.den.hurk.dev
        description:    My server in the cloud.
        icon:           /icons/cloud.svg
        widget:         
            type:       tailscale
            deviceid:   {{HOMEPAGE_VAR_TAILSCALE_CLOUDSERVER_DEVICEID}}
            key:        {{HOMEPAGE_VAR_OAUTHKEY_TAILSCALE}} 
    - CPU Usage:
        widget:         # TODO : Set up service
            type:       glances
            url:        https://glances.cloud.tygo.van.den.hurk.dev
            username:   user # optional if auth enabled in Glances
            password:   pass # optional if auth enabled in Glances
            metric:     cpu
    - RAM Usage:
        widget:         # TODO : Set up service
            type:       glances
            url:        https://glances.cloud.tygo.van.den.hurk.dev
            username:   user # optional if auth enabled in Glances
            password:   pass # optional if auth enabled in Glances
            metric:     ram
    - Network Usage:
        widget:         # TODO : Set up service
            type:       glances
            url:        https://glances.cloud.tygo.van.den.hurk.dev
            username:   user # optional if auth enabled in Glances
            password:   pass # optional if auth enabled in Glances
            metric:     network:enp0s25

    - Home NAS server: # TODO : Setup
        href:           https://tygos-nasserver.tail9fcea.ts.net
        ping:           tygos-nasserver.tail9fcea.ts.net
        description:    My home NAS server.
        icon:           /icons/home.svg
        widget:
            type:       tailscale
            deviceid:   {{HOMEPAGE_VAR_TAILSCALE_CLOUDSERVER_DEVICEID}} # TODO : change this, also, is this a secret?
            key:        {{HOMEPAGE_VAR_OAUTHKEY_TAILSCALE}} 
    - CPU Usage:
        widget:         # TODO : Set up service
            type:       glances
            # url:        https://tygos-nasserver.tail9fcea.ts.net
            username:   user # optional if auth enabled in Glances
            password:   pass # optional if auth enabled in Glances
            metric:     cpu
    - RAM Usage:
        widget:         # TODO : Set up service
            type:       glances
            # url:        https://tygos-nasserver.tail9fcea.ts.net
            username:   user # optional if auth enabled in Glances
            password:   pass # optional if auth enabled in Glances
            metric:     ram
    - Network Usage:
        widget:         # TODO : Set up service
            type:       glances
            # url:        https://tygos-nasserver.tail9fcea.ts.net
            username:   user # optional if auth enabled in Glances
            password:   pass # optional if auth enabled in Glances
            metric:     network:enp0s25

    - Home Cluster worker 0: # TODO : Setup
        ping:           worker0.cluster.home.tygo.van.den.hurk.dev
        description:    The first worker of my Kubernetes cluster at home.
        icon:           /icons/cluster.svg
        widget:
            type:       tailscale
            deviceid:   deviceid
            key:        apiKeyApiKeyApiKeyApiKeyApiKey # TODO : get token
    - CPU Usage:
        widget:         # TODO : Set up service
            type:       glances
            url:        https://glances.worker0.cluster.home.tygo.van.den.hurk.dev
            username:   user # optional if auth enabled in Glances
            password:   pass # optional if auth enabled in Glances
            metric:     cpu
    - RAM Usage:
        widget:         # TODO : Set up service
            type:       glances
            url:        https://glances.worker0.cluster.home.tygo.van.den.hurk.dev
            username:   user # optional if auth enabled in Glances
            password:   pass # optional if auth enabled in Glances
            metric:     ram
    - Network Usage:
        widget:         # TODO : Set up service
            type:       glances
            url:        https://glances.worker0.cluster.home.tygo.van.den.hurk.dev
            username:   user # optional if auth enabled in Glances
            password:   pass # optional if auth enabled in Glances
            metric:     network:enp0s25

    - Home Cluster worker 1: # TODO : Setup
        ping:           worker1.cluster.home.tygo.van.den.hurk.dev
        description:    The second worker of my Kubernetes cluster at home.
        icon:           /icons/cluster.svg
        widget:
            type:       tailscale
            deviceid:   deviceid
            key:        apiKeyApiKeyApiKeyApiKeyApiKey # TODO : get token
    - CPU Usage:
        widget:         # TODO : Set up service
            type:       glances
            url:        https://glances.worker1.cluster.home.tygo.van.den.hurk.dev
            username:   user # optional if auth enabled in Glances
            password:   pass # optional if auth enabled in Glances
            metric:     cpu
    - RAM Usage:
        widget:         # TODO : Set up service
            type:       glances
            url:        https://glances.worker1.cluster.home.tygo.van.den.hurk.dev
            username:   user # optional if auth enabled in Glances
            password:   pass # optional if auth enabled in Glances
            metric:     ram
    - Network Usage:
        widget:         # TODO : Set up service
            type:       glances
            url:        https://glances.worker1.cluster.home.tygo.van.den.hurk.dev
            username:   user # optional if auth enabled in Glances
            password:   pass # optional if auth enabled in Glances
            metric:     network:enp0s25

    - Home Cluster worker 2: # TODO : Setup
        ping:           worker2.cluster.home.tygo.van.den.hurk.dev
        description:    The third worker of my Kubernetes cluster at home.
        icon:           /icons/cluster.svg
        widget:
            type:       tailscale
            deviceid:   deviceid
            key:        apiKeyApiKeyApiKeyApiKeyApiKey # TODO : get token
    - CPU Usage:
        widget:         # TODO : Set up service
            type:       glances
            url:        https://glances.worker2.cluster.home.tygo.van.den.hurk.dev
            username:   user # optional if auth enabled in Glances
            password:   pass # optional if auth enabled in Glances
            metric:     cpu
    - RAM Usage:
        widget:         # TODO : Set up service
            type:       glances
            url:        https://glances.worker2.cluster.home.tygo.van.den.hurk.dev
            username:   user # optional if auth enabled in Glances
            password:   pass # optional if auth enabled in Glances
            metric:     ram
    - Network Usage:
        widget:         # TODO : Set up service
            type:       glances
            url:        https://glances.worker2.cluster.home.tygo.van.den.hurk.dev
            username:   user # optional if auth enabled in Glances
            password:   pass # optional if auth enabled in Glances
            metric:     network:enp0s25

    - Home Cluster worker 3: # TODO : Setup
        ping:           worker3.cluster.home.tygo.van.den.hurk.dev
        description:    The forth worker of my Kubernetes cluster at home.
        icon:           /icons/cluster.svg
        widget:
            type:       tailscale
            deviceid:   deviceid
            key:        apiKeyApiKeyApiKeyApiKeyApiKey # TODO : get token
    - CPU Usage:
        widget:         # TODO : Set up service
            type:       glances
            url:        https://glances.worker3.cluster.home.tygo.van.den.hurk.dev
            username:   user # optional if auth enabled in Glances
            password:   pass # optional if auth enabled in Glances
            metric:     cpu
    - RAM Usage:
        widget:         # TODO : Set up service
            type:       glances
            url:        https://glances.worker3.cluster.home.tygo.van.den.hurk.dev
            username:   user # optional if auth enabled in Glances
            password:   pass # optional if auth enabled in Glances
            metric:     ram
    - Network Usage:
        widget:         # TODO : Set up service
            type:       glances
            url:        https://glances.worker3.cluster.home.tygo.van.den.hurk.dev
            username:   user # optional if auth enabled in Glances
            password:   pass # optional if auth enabled in Glances
            metric:     network:enp0s25

    - Home Cluster worker 4: # TODO : Setup
        ping:           worker4.cluster.home.tygo.van.den.hurk.dev
        description:    The forth worker of my Kubernetes cluster at home.
        icon:           /icons/cluster.svg
        widget:
            type:       tailscale
            deviceid:   deviceid
            key:        apiKeyApiKeyApiKeyApiKeyApiKey # TODO : get token
    - CPU Usage:
        widget:         # TODO : Set up service
            type:       glances
            url:        https://glances.worker4.cluster.home.tygo.van.den.hurk.dev
            username:   user # optional if auth enabled in Glances
            password:   pass # optional if auth enabled in Glances
            metric:     cpu
    - RAM Usage:
        widget:         # TODO : Set up service
            type:       glances
            url:        https://glances.worker4.cluster.home.tygo.van.den.hurk.dev
            username:   user # optional if auth enabled in Glances
            password:   pass # optional if auth enabled in Glances
            metric:     ram
    - Network Usage:
        widget:         # TODO : Set up service
            type:       glances
            url:        https://glances.worker4.cluster.home.tygo.van.den.hurk.dev
            username:   user # optional if auth enabled in Glances
            password:   pass # optional if auth enabled in Glances
            metric:     network:enp0s25

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MANAGEMENT ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

# - Management:
#
#     - Prometheus:
#         href: https://prometheus-prod-1.srv-prod-1.home.clcreative.de
#         description: prometheus-prod-1 on srv-prod-1
#         icon: prometheus.svg
#         server: srv-prod-1
#         container: prometheus-prod-1
#         widget:
#             type: prometheus
#             url: https://prometheus-prod-1.srv-prod-1.home.clcreative.de
#     - Grafana:
#         href: https://grafana-prod-1.srv-prod-1.home.clcreative.de
#         description: grafana-prod-1 on srv-prod-1
#         icon: grafana.svg
#         server: srv-prod-1
#         container: grafana-prod-1

# - Automation:
#     - Kestra:
#         href: https://kestra-demo-1.srv-prod-1.home.clcreative.de
#         description: kestra-demo-1 on srv-prod-1
#         icon: https://kestra-io.gallerycdn.vsassets.io/extensions/kestra-io/kestra/0.0.1/1692285562923/Microsoft.VisualStudio.Services.Icons.Default

#     - Ansible Semaphore:
#         href: https://ansiblesemaphore-prod-1.srv-prod-1.home.clcreative.de
#         description: ansiblesemaphore-prod-1 on srv-prod-1
#         icon: si-ansible-#EE0000
#     - ArgoCD:
#         href: https://argocd-prod-1.kube-prod-1.home.clcreative.de
#         description: argocd-prod-1 on kube-prod-1
#         icon: si-argo-#EF7B4D
#

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
- Documentation:       

    - Documentation Services:       
        href:           https://documentation.services.tygo.van.den.hurk.dev
        siteMonitor:    http://documentation.services.tygo.van.den.hurk.dev
        description:    A documentation site where I write about all my services, and how you can use them.
        icon:           /icons/documentation.svg
